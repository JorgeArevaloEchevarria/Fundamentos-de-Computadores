TE LOS PASO POR AQUI PORQUE YA VERAS COMO SE QUEDAN, SE EXTIENDEN EN HORIZONTAL

button.c

#include "ports.h"
#include "button.h"

// macros para seleccionar
// los bits 6 y 7 del puerto

#define BUTTONS (0x3 << 6)

void button_init( void )
{
	rPCONG &= ~( 0xF << 12 );
}

unsigned int read_button( void )
{
	unsigned int status;
	do {
			status = ~( rPDATG );
			status = status & BUTTONS;
	} while( status == 0 );

	status = (status >> 6) & 0x3;

	return status;
}

-----------------------------

button.h

#ifndef BUTTON_H_
#define BUTTON_H_

#define PULSADOR1 0x01
#define PULSADOR2 0x02

void button_init( void );
unsigned int read_button( void );

#endif

---------------------------

D8Led.c

#include "ports.h"
#include "D8Led.h"

/* 
 * Mascaras utiles para el uso del display de 8 segmentos
 * Cada bit representa un segmento. En la mascara ponemos
 * un 1 si queremos que se encienda dicho segmento. Como 
 * el display funciona con logica invertida, nos toca 
 * invertir el valor al escribir en el puerto.
 */
#define SEGMENT_A		0x80		
#define SEGMENT_B		0x40
#define SEGMENT_C		0x20
#define SEGMENT_D		0x08
#define SEGMENT_E		0x04
#define SEGMENT_F		0x02
#define SEGMENT_G		0x01
#define SEGMENT_P		0x10

#define DIGIT_0  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_G )
#define DIGIT_1  ( SEGMENT_B | SEGMENT_C )
#define DIGIT_2  ( SEGMENT_A | SEGMENT_B | SEGMENT_F | SEGMENT_E | SEGMENT_D )
#define DIGIT_3  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_F )
#define DIGIT_4  ( SEGMENT_F | SEGMENT_B | SEGMENT_C | SEGMENT_G )
#define DIGIT_5  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_G | SEGMENT_F )
#define DIGIT_6  ( SEGMENT_A | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
#define DIGIT_7  ( SEGMENT_A | SEGMENT_B | SEGMENT_C )
#define DIGIT_8  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
#define DIGIT_9  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_F | SEGMENT_G )
#define DIGIT_A  ( SEGMENT_A | SEGMENT_B | SEGMENT_C | SEGMENT_E | SEGMENT_F | SEGMENT_G )
#define DIGIT_B  ( SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
#define DIGIT_C  ( SEGMENT_D | SEGMENT_E | SEGMENT_F )
#define DIGIT_D  ( SEGMENT_B | SEGMENT_C | SEGMENT_D | SEGMENT_E | SEGMENT_F )
#define DIGIT_E  ( SEGMENT_A | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G )
#define DIGIT_F  ( SEGMENT_A | SEGMENT_E | SEGMENT_F | SEGMENT_G )


/* Tablas para facilitar el uso del display */

static unsigned int Segments[] = { SEGMENT_A, SEGMENT_B, SEGMENT_C, SEGMENT_D,
	                               SEGMENT_E, SEGMENT_G, SEGMENT_F, SEGMENT_P };

static unsigned int Digits[] = { DIGIT_0, DIGIT_1, DIGIT_2, DIGIT_3, 
	 							 DIGIT_4, DIGIT_5, DIGIT_6, DIGIT_7, 
								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F };
			  					  
void D8Led_init(void)
{
    LED8ADDR = ~0 ;
}

void D8Led_segment(int value)
{
	if( (value >= 0) && (value < 8) )
		LED8ADDR = ~Segments[value];	 
}

void D8Led_digit(int value)
{
	if( (value >= 0) && (value < 16) )
		LED8ADDR = ~Digits[value];	 
}


-------------------

D8Led.h

#ifndef D8LED_H_
#define D8LED_H_

void D8Led_init(void);
void D8Led_segment(int value);
void D8Led_digit(int value);

#endif

------------------

leds.c

#include "ports.h"
#include "leds.h"

// Mascaras de bits
#define LED1 0x01
#define LED2 0x02
#define BIT_LED1 (0x1 << 9)
#define BIT_LED2 (0x1 << 10)

// status representa el estado de los leds
// sÃ³lo tienen sentido los dos bites menos 
// significativos, cada uno para un led
// 1 encendido y 0 apagado
static unsigned int status = 0; 

void leds_init( void )
{
	rPCONB = 0x1ff;
	leds_display( status );
}


void led1_on( void )
{
	status |=  LED1;
	leds_display( status );
}

void led1_off( void )
{
	status &=  ~LED1;
	leds_display( status );
}

void led2_on( void )
{
	status |=  LED2;
	leds_display( status );
}

void led2_off( void )
{
	status &=  ~LED2;
	leds_display( status );
}

void led1_switch( void )
{
	status ^= LED1;
	leds_display( status );
}

void led2_switch( void )
{
	status ^= LED2;
	leds_display( status );
}

void leds_switch( void ){
	status ^= (LED1 | LED2);
	leds_display( status );
}

void leds_display( unsigned int leds_status )
{
	status = leds_status;
	
	// LED 1
	if( status & LED1 )
		rPDATB &= ~BIT_LED1;
	else
		rPDATB |= BIT_LED1;

	// LED 2
	if( status & LED2 )
		rPDATB &= ~BIT_LED2;
	else
		rPDATB |= BIT_LED2;
}


TODOS ESTOS MAS LOS DEL OTRO ARCHIVO ES LA PCTA 5