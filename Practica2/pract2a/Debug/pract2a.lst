
pract2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  0c000000  0c000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          00000004  0c000020  0c000020  00008020  2**0
                  ALLOC
  2 .text         00000040  0c000024  0c000024  00008024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.attributes 00000022  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
  4 .debug_line   0000004b  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000075  00000000  00000000  000080d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000014  00000000  00000000  00008146  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000020  00000000  00000000  00008160  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c000024 <start>:
.bss
max: 	.space 4

.text
start:
		mov r0, #0		//i=0 y me sirve para poner 0 a max
 c000024:	e3a00000 	mov	r0, #0
		ldr r1,=max		// Leo la dir. de max
 c000028:	e59f102c 	ldr	r1, [pc, #44]	; c00005c <fin_for+0x4>
		str r0,[r1]		// Escribo 0 en max
 c00002c:	e5810000 	str	r0, [r1]

0c000030 <for>:
for:	cmp r0,#N		//comparo i con N
 c000030:	e3500008 	cmp	r0, #8
		bge fin_for
 c000034:	aa000007 	bge	c000058 <fin_for>
		ldr r2,=A		//cargo la primera dirreccion del array
 c000038:	e59f2020 	ldr	r2, [pc, #32]	; c000060 <fin_for+0x8>
		ldr r3,[r2,r0,LSL#2]//leo el elemento del array y lo guardo en r3
 c00003c:	e7923100 	ldr	r3, [r2, r0, lsl #2]
		ldr r4,[r1]		//cargo el contenido de max
 c000040:	e5914000 	ldr	r4, [r1]

0c000044 <if>:
if: 	cmp r4,r3		//los cambio el orden para q sea bge
 c000044:	e1540003 	cmp	r4, r3
		bge fin_if
 c000048:	aa000000 	bge	c000050 <fin_if>
		str r3,[r1]		//guardo el valor del array en max
 c00004c:	e5813000 	str	r3, [r1]

0c000050 <fin_if>:
fin_if:	add r0,r0,#1	//i++
 c000050:	e2800001 	add	r0, r0, #1
		b for
 c000054:	eafffff5 	b	c000030 <for>

0c000058 <fin_for>:
fin_for:b .
 c000058:	eafffffe 	b	c000058 <fin_for>
 c00005c:	0c000020 	.word	0x0c000020
 c000060:	0c000000 	.word	0x0c000000
