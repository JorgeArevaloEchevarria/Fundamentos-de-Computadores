.extern _stack
.global start
.EQU N, 8
.data
A: .word 7,3,25,4,75,2,1,1
max: .space 4
ind: .space 4
.text
start:
ldr sp, =_stack
mov fp, #0
BL Main
B .

Main:
push {fp, lr}
mov fp, sp
ldr r1,=max @cargar la direccion de memoria de max en registro
ldr r2, =A @cargar la direccion de memoria de A en registro
ldr r3, =ind @ cargamos la direccion de memoria de ind
BL Max
pop {fp, lr}
mov pc, lr

Max:
push {fp}
mov r4, #0 @ la i
mov r6, #0 @ maximo
mov fp, sp @ SP a 0 por solo tener fp
for:
cmp r4, #N @ comparamos r4 con i para salir del for
BGE fin_for
ldr r6,[r2,r4,lsl#2] @ cargamos en r3 del array el numero
add r4, r4, #1 @ sumamos 1 a la i
cmp r6, r5 @ comparamos el numero del array con el maximo
BLE for @ si es mayor seguimos
mov r5,r6 @ movemos el maximo de ahora
str r5,[r1]@ cambiamos el maximo en la memoria
mov r7, r4 @ cambiamos el indice
sub r7, r7 , #1
str r7, [r3]
B for
fin_for:
mov r0 , r7 @ en r0 devovlemos la posicion del maximo
pop {fp}
mov pc, lr
.end
/*int i, max, ind;
int max(int A[], int longA){
max=0;
ind=0;
for(i=0; i<longA; i++){
if(A[i]>max){
max=A[i];
ind=i;
}
}
return(ind);
}*/
